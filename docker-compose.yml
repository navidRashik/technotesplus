# docker-compose build
version: "3"

services:
    db:
        image: postgres:13-alpine
        environment:
            - POSTGRES_USER=${DATABASE_USER}
            - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
            - POSTGRES_DB=${DATABASE_NAME}
        volumes:
            - prod_postgres_data:/var/lib/postgresql/data/
        restart: always
        ports:
          - "5432:5432"
    web:
        # for prod must use this: gunicorn technotesplus.asgi:application -w 1 -k uvicorn.workers.UvicornWorker -b [::]:8000"
        image: technotes
        build:
            context: .
            dockerfile: Dockerfile
        command: >
            bash -c "python3 manage.py migrate
            && python manage.py collectstatic --noinput
            && python manage.py runserver [::]:8000"
        volumes:
            - .:/app
            - ./static:/usr/src/app/static
        ports:
            - "8000:8000"
        depends_on:
            - redis
        # deploy:
        #   # replicas: 13
        #   mode: global
        #   update_config:
        #     failure_action: rollback
        #     order: start-first
        #   restart_policy:
        #     condition: on-failure

    worker:
        build:
            context: .
            dockerfile: Dockerfile
        command: bash -c "celery -A technotesplus worker -l INFO"
        volumes:
            - .:/app
        environment:
            - CELERY_BROKER=redis://redis:6379/0
            - CELERY_BACKEND=redis://redis:6379/0
        depends_on:
            - web
            - redis

    # flower:
    #     image: mher/flower
    #     container_name: flower
    #     command: celery flower --persisten=True
    #     environment:
    #         - CELERY_BROKER_URL=redis://redis:6379/0
    #         - FLOWER_PORT=5566
    #     ports:
    #         - 5566:5566
    #     volumes:
    #         - flower_data:/data
    #     depends_on:
    #         - worker

    redis:
        restart: always
        image: redis:5-alpine
        # expose:
        #   - "6379"
        ports:
            - "6379:6379"
        healthcheck:
            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

    # elasticsearch:
    #     container_name: es-container
    #     image: elasticsearch:7.17.7
    #     volumes:
    #         - elastic_data:/usr/share/elasticsearch/data
    #     environment:
    #         - xpack.security.enabled=false
    #         - "discovery.type=single-node"
    #     ports:
    #         - 9200:9200
    # kibana:
    #     container_name: kb-container
    #     image: kibana:7.17.7
    #     environment:
    #         - ELASTICSEARCH_HOSTS=http://es-container:9200
    #     depends_on:
    #         - elasticsearch
    #     ports:
    #         - 5601:5601

volumes:
    prod_postgres_data:
    flower_data:
    elastic_data:
        driver: local
